/*
 * Copyright 2016 Andrew Reitz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// configuration of the Maven artifacts
apply plugin: 'maven-publish'

// add javadoc/source jar tasks as artifacts
artifacts {
  archives androidSourcesJar, androidJavadocsJar
}

publishing {
  publications {
    dist(MavenPublication) {
      groupId project.group
      artifactId project.name
      version project.version
      artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
      artifact androidJavadocsJar {
        classifier 'source'
      }
      artifact androidSourcesJar {
        classifier 'javadoc'
      }
      pom.withXml {
        def Node root = asNode()
        root.appendNode('name', project.name)
        root.appendNode('description', POM_DESCRIPTION)
        root.appendNode('url', POM_URL)

        def issues = root.appendNode('issueManagement')
        issues.appendNode('system', 'github')
        issues.appendNode('url', POM_ISSUE_MANAGEMENT)

        def scm = root.appendNode('scm')
        scm.appendNode('url', POM_SCM_URL)
        scm.appendNode('connection', POM_SCM_CONNECTION)
        scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

        def license = root.appendNode('licenses').appendNode('license')
        license.appendNode('name', 'The Apache Software License, Version 2.0')
        license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
        license.appendNode('distribution', 'repo')

        def dev = root.appendNode('developers').appendNode('developer')
        dev.appendNode('id', POM_DEVELOPER_ID)
        dev.appendNode('name', POM_DEVELOPER_NAME)

        def dependenciesNode = asNode().appendNode('dependencies')
        //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
        configurations.compile.allDependencies.each {
          if(it.group != null && (it.name != null || "unspecified".equals(it.name))
              && it.version != null) {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
          }
        }
      }
    }
  }
}
